// ID of the Google Sheet
const SPREADSHEET_ID = '1NX0XlZd8qI4mk0ubcySPivoHFYv0847mEdBeK2nKvqE';
// Sheet names
const ACCOUNT_SHEET_NAME = 'Account';
const EMPLOYEE_SHEET_NAME = 'ข้อมูลพนักงาน';
const OT_PLAN_SHEET_NAME = 'Plan ot';
const ATTENDANCE_SHEET_NAME = 'เช็คชื่อ';
const SHIFT_SHEET_NAME = 'ตารางกะ';
const SHIFT_MANAGEMENT_SHEET_NAME = 'จัดการกะ';
// ID of the Google Drive Folder for storing photos
const EMPLOYEE_PHOTO_FOLDER_ID = '1_0Mt3Imhz0wg2-q8PaBXKWVwTe8Kxtjr';

// Handle CORS preflight requests
function doOptions(e) {
  return ContentService.createTextOutput('')
    .setMimeType(ContentService.MimeType.TEXT)
    .setHeader('Access-Control-Allow-Origin', '*')
    .setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
    .setHeader('Access-Control-Allow-Headers', 'Content-Type')
    .setHeader('Access-Control-Max-Age', '86400');
}

function doGet(e) {
  try {
    const action = e.parameter.action;
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);

    switch(action){
      case 'getEmployees': {
        const sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
        if (!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetEmployees(sheet);
      }
      case 'getOtPlan': {
        const sheet = ss.getSheetByName(OT_PLAN_SHEET_NAME);
        if (!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetOtPlan(sheet, e.parameter.date);
      }
      case 'getAttendance': {
        const sheet = ss.getSheetByName(ATTENDANCE_SHEET_NAME);
        if(!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetAttendance(sheet, e.parameter.date);
      }
      case 'getCalendarLeaveData': {
        const sheet = ss.getSheetByName(ATTENDANCE_SHEET_NAME);
        if(!sheet) return createJsonResponse({ status: 'success', data: {} });
        return handleGetCalendarLeaveData(sheet);
      }
      case 'getShiftData': {
        const sheet = ss.getSheetByName(SHIFT_SHEET_NAME);
        if(!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetShiftData(sheet, e.parameter.date, e.parameter.shiftType);
      }
      case 'getShiftAssignments': {
        const sheet = ss.getSheetByName(SHIFT_MANAGEMENT_SHEET_NAME);
        if(!sheet) return createJsonResponse({ success: true, assignments: [] });
        return handleGetShiftAssignments(sheet, e.parameter.date, e.parameter.shiftType);
      }
      default:
        return createJsonResponse({ status: 'error', message: 'Invalid GET action.' });
    }
  } catch (error) {
    return createJsonResponse({ status: 'error', message: 'An unexpected error occurred: ' + error.toString() });
  }
}


function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    const action = data.action;
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);

    switch(action) {
        case 'register':
        case 'login': {
            const accountSheet = ss.getSheetByName(ACCOUNT_SHEET_NAME);
            if (!accountSheet) return createJsonResponse({ status: 'error', message: 'Account sheet not found.' });
            if (action === 'register') return handleRegistration(accountSheet, data);
            
            const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            const { loginIdentifier, password } = data;
            return handleLogin(accountSheet, employeeSheet, loginIdentifier, password);
        }
        case 'addEmployee': {
            let sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            if (!sheet) {
                sheet = ss.insertSheet(EMPLOYEE_SHEET_NAME);
                sheet.appendRow(['ชื่อ-นามสกุล', 'รหัสพนักงาน', 'ส่วนงาน', 'ตำแหน่ง', 'หน้าที่', 'Role', 'วันที่เริ่มงาน', 'ลิงก์รูปถ่าย']);
            }
            return handleAddEmployee(sheet, data.data);
        }
        case 'updateEmployee': {
            let sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Employee sheet not found.' });
            return handleUpdateEmployee(sheet, data.data);
        }
        case 'deleteEmployee': {
            let sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Employee sheet not found.' });
            return handleDeleteEmployee(sheet, data.employeeId);
        }
        case 'saveOtPlan': {
            let sheet = ss.getSheetByName(OT_PLAN_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Sheet "Plan ot" not found.' });
            return handleSaveOtPlan(sheet, data.data);
        }
        case 'saveAttendance': {
            let sheet = ss.getSheetByName(ATTENDANCE_SHEET_NAME);
             if (!sheet) return createJsonResponse({ status: 'error', message: 'Sheet "เช็คชื่อ" not found.' });
            return handleSaveAttendance(sheet, data.data);
        }
         case 'saveShift': {
            let sheet = ss.getSheetByName(SHIFT_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Sheet "ตารางกะ" not found.' });
            return handleSaveShift(sheet, data.data);
        }
        case 'saveShiftAssignment': {
            let sheet = ss.getSheetByName(SHIFT_MANAGEMENT_SHEET_NAME);
            if (!sheet) {
                sheet = ss.insertSheet(SHIFT_MANAGEMENT_SHEET_NAME);
                sheet.getRange(1, 1, 1, 5).setValues([['วันที่', 'ประเภทกะ', 'เวลากะ', 'รหัสพนักงาน', 'ชื่อพนักงาน']]);
            }
            return handleSaveShiftAssignment(sheet, data.shiftData);
        }
        default:
            return createJsonResponse({ status: 'error', message: 'Invalid POST action.' });
    }
  } catch (error) {
    return createJsonResponse({ status: 'error', message: 'An unexpected error occurred: ' + error.toString() });
  }
}
function handleGetShiftData(sheet, date, shiftType) {
    if (!date || !shiftType) {
        return createJsonResponse({ status: 'error', message: 'Date and shiftType parameters are required.' });
    }
    
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: [] });
    }

    const headers = data[0].map(h => h.trim());
    const dateCol = headers.indexOf('วันที่');
    const shiftTypeCol = headers.indexOf('ประเภทกะ');
    const empIdCol = headers.indexOf('รหัสพนักงาน');

    if (dateCol === -1 || shiftTypeCol === -1 || empIdCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns not found in ตารางกะ sheet.' });
    }
    
    const requestedDate = new Date(date);
    const records = data.slice(1)
        .filter(row => {
            if (!row[dateCol]) return false;
            const rowDate = new Date(row[dateCol]);
            const rowShiftType = row[shiftTypeCol];
            return rowDate.getFullYear() === requestedDate.getFullYear() &&
                   rowDate.getMonth() === requestedDate.getMonth() &&
                   rowDate.getDate() === requestedDate.getDate() &&
                   rowShiftType === shiftType;
        })
        .map(row => row[empIdCol]); // Return only employee IDs

    return createJsonResponse({ status: 'success', data: records });
}


function handleSaveShift(sheet, data) {
    const { date, shiftType, employeeIds } = data;
    if (!date || !shiftType || !employeeIds) {
        return createJsonResponse({ status: 'error', message: 'Missing date, shiftType, or employeeIds data.' });
    }

    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
    if (!employeeSheet) return createJsonResponse({ status: 'error', message: 'Employee data sheet not found.' });
    
    const employeeData = employeeSheet.getDataRange().getValues();
    const employeeMap = employeeData.slice(1).reduce((acc, row) => {
        const employeeId = row[1];
        const fullName = row[0];
        const department = row[2];
        if (employeeId) acc[employeeId.toString()] = { fullName, department };
        return acc;
    }, {});

    const sheetData = sheet.getDataRange().getValues();
    const headers = sheetData.length > 0 ? sheetData[0].map(h => h.trim()) : [];
    const dateColIdx = headers.indexOf('วันที่');
    const shiftTypeColIdx = headers.indexOf('ประเภทกะ');
    
    if (headers.length > 0 && (dateColIdx === -1 || shiftTypeColIdx === -1)) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, ประเภทกะ) not found in ตารางกะ sheet.' });
    }

    const requestedDate = new Date(date);
    
    const rowsToDelete = [];
    if (sheetData.length > 1) {
      for (let i = sheetData.length - 1; i >= 1; i--) {
          const row = sheetData[i];
          if (!row[dateColIdx]) continue;
          const rowDate = new Date(row[dateColIdx]);
          const rowShiftType = row[shiftTypeColIdx];
          if (rowDate.getFullYear() === requestedDate.getFullYear() &&
              rowDate.getMonth() === requestedDate.getMonth() &&
              rowDate.getDate() === requestedDate.getDate() &&
              rowShiftType === shiftType) {
              rowsToDelete.push(i + 1);
          }
      }
    }
    
    rowsToDelete.forEach(rowIndex => sheet.deleteRow(rowIndex));

    const newRows = employeeIds.map(id => {
        const emp = employeeMap[id.toString()] || { fullName: 'Unknown', department: 'Unknown' };
        return [
            date,
            shiftType,
            id,
            emp.fullName,
            emp.department
        ];
    });

    if (newRows.length > 0) {
        sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
    }
    
    if (headers.length === 0 || headers.join('').trim() === '') {
        sheet.getRange(1, 1, 1, 5).setValues([['วันที่', 'ประเภทกะ', 'รหัสพนักงาน', 'ชื่อ-สกุล', 'ส่วนงาน']]);
    }

    return createJsonResponse({ status: 'success', message: 'Shift data saved successfully.' });
}



function handleGetCalendarLeaveData(sheet) {
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: {} });
    }

    const headers = data[0].map(h => h.trim());
    const dateCol = headers.indexOf('วันที่');
    const empIdCol = headers.indexOf('รหัสพนักงาน');
    const nameCol = headers.indexOf('ชื่อ-นามสกุล');
    const statusCol = headers.indexOf('สถานะ');
    const reasonCol = headers.indexOf('เหตุผล');

    if (dateCol === -1 || empIdCol === -1 || statusCol === -1 || nameCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน, ชื่อ-นามสกุล, สถานะ) not found in เช็คชื่อ sheet.' });
    }
    
    const leaveDataByDate = {};
    const leaveStatusToExclude = ['มาทำงาน', 'สาย/Meeting'];

    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const status = row[statusCol];

        if (status && !leaveStatusToExclude.includes(status)) {
            const date = new Date(row[dateCol]);
            const dateStr = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0');
            
            if (!leaveDataByDate[dateStr]) {
                leaveDataByDate[dateStr] = [];
            }
            
            leaveDataByDate[dateStr].push({
                employeeName: row[nameCol],
                employeeId: row[empIdCol],
                leaveType: status,
                reason: reasonCol > -1 ? row[reasonCol] : '',
                leaveDate: date.toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'Asia/Bangkok' })
            });
        }
    }
    
    return createJsonResponse({ status: 'success', data: leaveDataByDate });
}


function handleGetAttendance(sheet, date) {
    if (!date) return createJsonResponse({ status: 'error', message: 'Date parameter is missing.' });
    
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) return createJsonResponse({ status: 'success', data: [] });

    const headers = data[0].map(h => h.trim());
    const dateCol = headers.indexOf('วันที่');
    const empIdCol = headers.indexOf('รหัสพนักงาน');
    const statusCol = headers.indexOf('สถานะ');
    const reasonCol = headers.indexOf('เหตุผล');

    if (dateCol === -1 || empIdCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in เช็คชื่อ sheet.' });
    }
    
    const requestedDate = new Date(date);
    const records = data.slice(1)
        .filter(row => {
            if (!row[dateCol]) return false;
            const rowDate = new Date(row[dateCol]);
            return rowDate.getFullYear() === requestedDate.getFullYear() &&
                   rowDate.getMonth() === requestedDate.getMonth() &&
                   rowDate.getDate() === requestedDate.getDate();
        })
        .map(row => ({
            employeeId: row[empIdCol],
            status: statusCol > -1 ? row[statusCol] : 'มาทำงาน',
            reason: reasonCol > -1 ? row[reasonCol] : ''
        }));

    return createJsonResponse({ status: 'success', data: records });
}


function handleSaveAttendance(sheet, data) {
    const { date, records } = data;
    if (!date || !records) {
        return createJsonResponse({ status: 'error', message: 'Missing date or records data.' });
    }

    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
    if (!employeeSheet) return createJsonResponse({ status: 'error', message: 'Employee data sheet not found.' });
    
    const employeeData = employeeSheet.getDataRange().getValues();
    const employeeMap = employeeData.slice(1).reduce((acc, row) => {
        const employeeId = row[1];
        const fullName = row[0];
        if (employeeId) acc[employeeId] = { fullName };
        return acc;
    }, {});

    const sheetData = sheet.getDataRange().getValues();
    const headers = sheetData.length > 0 ? sheetData[0].map(h => h.trim()) : [];
    const dateColIdx = headers.indexOf('วันที่');
    const empIdColIdx = headers.indexOf('รหัสพนักงาน');
    
    if (headers.length > 0 && (dateColIdx === -1 || empIdColIdx === -1)) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in เช็คชื่อ sheet.' });
    }

    const requestedDate = new Date(date);
    
    const updatedEmployeeIds = records.map(r => r.employeeId.toString());

    const rowsToDelete = [];
    if (sheetData.length > 1) {
      for (let i = sheetData.length - 1; i >= 1; i--) {
          const row = sheetData[i];
          if (!row[dateColIdx]) continue;
          const rowDate = new Date(row[dateColIdx]);
          const rowEmpId = row[empIdColIdx].toString();
          if (rowDate.getFullYear() === requestedDate.getFullYear() &&
              rowDate.getMonth() === requestedDate.getMonth() &&
              rowDate.getDate() === requestedDate.getDate() &&
              updatedEmployeeIds.includes(rowEmpId)) {
              rowsToDelete.push(i + 1);
          }
      }
    }
    
    rowsToDelete.forEach(rowIndex => sheet.deleteRow(rowIndex));

    const newRows = records.map(record => {
        const emp = employeeMap[record.employeeId] || { fullName: 'Unknown' };
        return [
            date,
            record.employeeId,
            emp.fullName,
            record.status,
            record.reason,
            new Date() // Timestamp
        ];
    });

    if (newRows.length > 0) {
        sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
    }
    
    if (headers.length === 0 || headers.join('').trim() === '') {
        sheet.getRange(1, 1, 1, 6).setValues([['วันที่', 'รหัสพนักงาน', 'ชื่อ-นามสกุล', 'สถานะ', 'เหตุผล', 'เวลาบันทึก']]);
    }

    return createJsonResponse({ status: 'success', message: 'Attendance saved successfully.' });
}


function handleGetOtPlan(sheet, date) {
    if (!date) {
        return createJsonResponse({ status: 'error', message: 'Date parameter is missing.' });
    }
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: [] });
    }
    const headers = data[0].map(h => h.trim());
    const planData = [];
    
    const dateCol = headers.indexOf('วันที่');
    const empIdCol = headers.indexOf('รหัสพนักงาน');
    const startTimeCol = headers.indexOf('เวลาเริ่ม');
    const endTimeCol = headers.indexOf('เวลาสิ้นสุด');
    const notesCol = headers.indexOf('หมายเหตุ / งาน');

    if (dateCol === -1 || empIdCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in Plan ot sheet.' });
    }

    const requestedDate = new Date(date);

    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (!row[dateCol]) continue;
        const rowDate = new Date(row[dateCol]);
        if (rowDate.getFullYear() === requestedDate.getFullYear() &&
            rowDate.getMonth() === requestedDate.getMonth() &&
            rowDate.getDate() === requestedDate.getDate()) 
        {
            planData.push({
                employeeId: row[empIdCol],
                startTime: startTimeCol > -1 ? row[startTimeCol] : '',
                endTime: endTimeCol > -1 ? row[endTimeCol] : '',
                notes: notesCol > -1 ? row[notesCol] : ''
            });
        }
    }
    return createJsonResponse({ status: 'success', data: planData });
}


function handleSaveOtPlan(sheet, data) {
    const { date, plans, department } = data;
    if (!date || !plans || !department) {
        return createJsonResponse({ status: 'error', message: 'Missing date, plans, or department data.' });
    }
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
    if (!employeeSheet) {
        return createJsonResponse({ status: 'error', message: 'Employee data sheet not found.' });
    }
    const employeeData = employeeSheet.getDataRange().getValues();
    const employeeHeaders = employeeData[0].map(h => h.trim());
    const empIdColIdx_empSheet = employeeHeaders.indexOf('รหัสพนักงาน');
    const fullNameColIdx_empSheet = employeeHeaders.indexOf('ชื่อ-นามสกุล');
    const deptColIdx_empSheet = employeeHeaders.indexOf('ส่วนงาน');
    
    const employeeMap = employeeData.slice(1).reduce((acc, row) => {
        const employeeId = row[empIdColIdx_empSheet];
        if (employeeId) {
            acc[employeeId] = { 
                fullName: row[fullNameColIdx_empSheet], 
                department: row[deptColIdx_empSheet]
            };
        }
        return acc;
    }, {});
    
    const sheetData = sheet.getDataRange().getValues();
    const headers = sheetData.length > 0 ? sheetData[0].map(h => h.trim()) : [];
    const dateColIdx = headers.indexOf('วันที่');
    const empIdColIdx = headers.indexOf('รหัสพนักงาน');
    
    if (headers.length > 0 && (dateColIdx === -1 || empIdColIdx === -1)) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in Plan ot sheet.' });
    }

    const requestedDate = new Date(date);

    const updatedEmployeeIds = plans.map(p => p.employeeId.toString());

    const rowsToDelete = [];
    if (sheetData.length > 1) {
      for (let i = sheetData.length - 1; i >= 1; i--) {
          if (!sheetData[i][dateColIdx]) continue;
          const rowDate = new Date(sheetData[i][dateColIdx]);
          const rowEmpId = sheetData[i][empIdColIdx].toString();
          if (rowDate.getFullYear() === requestedDate.getFullYear() &&
              rowDate.getMonth() === requestedDate.getMonth() &&
              rowDate.getDate() === requestedDate.getDate() &&
              updatedEmployeeIds.includes(rowEmpId)) {
              rowsToDelete.push(i + 1);
          }
      }
    }
    
    rowsToDelete.forEach(rowIndex => sheet.deleteRow(rowIndex));

    const newRows = plans
        .filter(plan => (plan.startTime && plan.endTime) || plan.notes) // Only add rows that have OT or a leave note
        .map(plan => {
            const emp = employeeMap[plan.employeeId] || { fullName: 'Unknown', department: department };
            return [
                date,
                plan.employeeId,
                emp.fullName,
                emp.department,
                plan.startTime,
                plan.endTime,
                plan.notes
            ];
    });

    if (newRows.length > 0) {
        sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
    }
    
    if (headers.length === 0 || headers.join('').trim() === '') {
        sheet.getRange(1, 1, 1, 7).setValues([['วันที่',	'รหัสพนักงาน',	'ชื่อ-สกุล',	'ส่วนงาน',	'เวลาเริ่ม',	'เวลาสิ้นสุด',	'หมายเหตุ / งาน']]);
    }

    return createJsonResponse({ status: 'success', message: 'OT Plan saved successfully.' });
}

function handleGetEmployees(sheet) {
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: [] });
    }
    const headers = data[0].map(h => h.trim());
    const employees = [];
    const colIndices = {
        fullName: headers.indexOf('ชื่อ-นามสกุล'),
        employeeId: headers.indexOf('รหัสพนักงาน'),
        department: headers.indexOf('ส่วนงาน'),
        position: headers.indexOf('ตำแหน่ง'),
        duty: headers.indexOf('หน้าที่'),
        startDate: headers.indexOf('วันที่เริ่มงาน'),
        photoUrl: headers.indexOf('ลิงก์รูปถ่าย'),
        role: headers.indexOf('Role')
    };
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (row.every(cell => cell === '')) continue;
        employees.push({
            fullName: colIndices.fullName > -1 ? row[colIndices.fullName] : undefined,
            employeeId: colIndices.employeeId > -1 ? row[colIndices.employeeId] : undefined,
            department: colIndices.department > -1 ? row[colIndices.department] : undefined,
            position: colIndices.position > -1 ? row[colIndices.position] : undefined,
            duty: colIndices.duty > -1 ? row[colIndices.duty] : undefined,
            startDate: colIndices.startDate > -1 ? row[colIndices.startDate] : undefined,
            photoUrl: colIndices.photoUrl > -1 ? row[colIndices.photoUrl] : undefined,
            role: colIndices.role > -1 ? row[colIndices.role] : 'User'
        });
    }
    return createJsonResponse({ status: 'success', data: employees });
}

function handleAddEmployee(sheet, employeeData) {
    const { fullName, employeeId, department, position, duty, startDate, role, photo, photoMimeType } = employeeData;
    let photoUrl = '';
    if (!fullName || !employeeId) {
        return createJsonResponse({ status: 'error', message: 'กรุณากรอกชื่อ-นามสกุล และรหัสพนักงาน' });
    }
    try {
        if (photo && photoMimeType) {
            const fileName = `${employeeId}_${new Date().getTime()}`;
            photoUrl = saveImageToDrive(photo, fileName, photoMimeType);
        }
        const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0].map(h => h.trim());
        const newRow = Array(headers.length).fill('');
        headers.forEach((header, index) => {
           switch (header) {
                case 'ชื่อ-นามสกุล': newRow[index] = fullName; break;
                case 'รหัสพนักงาน': newRow[index] = employeeId; break;
                case 'ส่วนงาน': newRow[index] = department; break;
                case 'ตำแหน่ง': newRow[index] = position; break;
                case 'หน้าที่': newRow[index] = duty; break;
                case 'วันที่เริ่มงาน': newRow[index] = startDate; break;
                case 'ลิงก์รูปถ่าย': newRow[index] = photoUrl; break;
                case 'Role': newRow[index] = role; break;
            }
        });
        sheet.appendRow(newRow);
        return createJsonResponse({ status: 'success', message: 'Employee added successfully.' });
    } catch (error) {
        return createJsonResponse({ status: 'error', message: 'Could not save data: ' + error.toString() });
    }
}

function handleUpdateEmployee(sheet, employeeData) {
    const { originalEmployeeId, fullName, employeeId, department, position, duty, startDate, role, photo, photoMimeType } = employeeData;
    if (!originalEmployeeId) {
        return createJsonResponse({ status: 'error', message: 'Original Employee ID is missing for update.' });
    }
    const data = sheet.getDataRange().getValues();
    const headers = data[0].map(h => h.trim());
    const employeeIdColIndex = headers.indexOf('รหัสพนักงาน');
    if (employeeIdColIndex === -1) {
        return createJsonResponse({ status: 'error', message: 'Cannot find "รหัสพนักงาน" column in the sheet.' });
    }
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
        if (data[i][employeeIdColIndex] && data[i][employeeIdColIndex].toString() === originalEmployeeId.toString()) {
            rowIndex = i + 1;
            break;
        }
    }
    if (rowIndex === -1) {
        return createJsonResponse({ status: 'error', message: `Employee with ID ${originalEmployeeId} not found.` });
    }
    try {
        const photoUrlColIndex = headers.indexOf('ลิงก์รูปถ่าย');
        let photoUrl = photoUrlColIndex > -1 ? sheet.getRange(rowIndex, photoUrlColIndex + 1).getValue() : '';
        if (photo && photoMimeType) {
            const fileName = `${employeeId}_${new Date().getTime()}`;
            photoUrl = saveImageToDrive(photo, fileName, photoMimeType);
        }
        headers.forEach((header, index) => {
            const col = index + 1;
            switch (header) {
                case 'ชื่อ-นามสกุล': sheet.getRange(rowIndex, col).setValue(fullName); break;
                case 'รหัสพนักงาน': sheet.getRange(rowIndex, col).setValue(employeeId); break;
                case 'ส่วนงาน': sheet.getRange(rowIndex, col).setValue(department); break;
                case 'ตำแหน่ง': sheet.getRange(rowIndex, col).setValue(position); break;
                case 'หน้าที่': sheet.getRange(rowIndex, col).setValue(duty); break;
                case 'วันที่เริ่มงาน': sheet.getRange(rowIndex, col).setValue(startDate); break;
                case 'ลิงก์รูปถ่าย': sheet.getRange(rowIndex, col).setValue(photoUrl); break;
                case 'Role': sheet.getRange(rowIndex, col).setValue(role); break;
            }
        });
        return createJsonResponse({ status: 'success', message: 'Employee data updated successfully.' });
    } catch (error) {
        return createJsonResponse({ status: 'error', message: 'Could not update data: ' + error.toString() });
    }
}

function handleDeleteEmployee(sheet, employeeId) {
    if (!employeeId) {
        return createJsonResponse({ status: 'error', message: 'Employee ID is missing for delete.' });
    }
    const data = sheet.getDataRange().getValues();
    const headers = data[0].map(h => h.trim());
    const employeeIdColIndex = headers.indexOf('รหัสพนักงาน');
     if (employeeIdColIndex === -1) {
        return createJsonResponse({ status: 'error', message: 'Cannot find "รหัสพนักงาน" column.' });
    }
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
        if (data[i][employeeIdColIndex] && data[i][employeeIdColIndex].toString() === employeeId.toString()) {
            rowIndex = i + 1; // 1-based index
            break;
        }
    }
    if (rowIndex > -1) {
        sheet.deleteRow(rowIndex);
        return createJsonResponse({ status: 'success', message: 'Employee deleted successfully.' });
    } else {
        return createJsonResponse({ status: 'error', message: `Employee with ID ${employeeId} not found.` });
    }
}

function handleRegistration(sheet, data) {
    const { username, password, fullName, position, department } = data;
    if (!username || !password || !fullName) {
        return createJsonResponse({ status: 'error', message: 'Username, password, and full name are required.' });
    }
    const users = sheet.getDataRange().getValues();
    for (let i = 1; i < users.length; i++) {
        if (users[i][0] === username) {
            return createJsonResponse({ status: 'error', message: 'Username already exists.' });
        }
    }
    sheet.appendRow([username, password, fullName, position, department]);
    return createJsonResponse({ status: 'success', message: 'Registration successful.' });
}

function handleLogin(accountSheet, employeeSheet, loginIdentifier, password) {
    console.log('Login attempt:', loginIdentifier); // Debug log
    
    if (!loginIdentifier || !password) {
        return createJsonResponse({ status: 'error', message: 'กรุณากรอกชื่อผู้ใช้/รหัส และรหัสผ่าน' });
    }
    
    const accountUsers = accountSheet.getDataRange().getValues();
    console.log('Account users data:', accountUsers.length); // Debug log
    
    // First, try to find by username in Account sheet
    for (let i = 1; i < accountUsers.length; i++) {
        const userRow = accountUsers[i];
        const username = userRow[0];
        if (username && username.toString().trim() === loginIdentifier.toString().trim()) {
            const correctPassword = userRow[1];
            if (correctPassword && correctPassword.toString().trim() === password.toString().trim()) {
                const userData = {
                    fullName: userRow[2] || '',
                    position: userRow[3] || '',
                    department: userRow[4] || ''
                };
                console.log('Login successful by username:', loginIdentifier); // Debug log
                return createJsonResponse({ status: 'success', message: 'Login successful.', userData: userData });
            } else {
                console.log('Wrong password for username:', loginIdentifier); // Debug log
                return createJsonResponse({ status: 'error', message: 'รหัสผ่านไม่ถูกต้อง' });
            }
        }
    }
    
    // If not found by username, try to find by employee ID
    if (!employeeSheet) {
        return createJsonResponse({ status: 'error', message: 'ไม่พบชื่อผู้ใช้' });
    }
    
    const employeeData = employeeSheet.getDataRange().getValues();
    let foundFullName = null;
    
    for (let i = 1; i < employeeData.length; i++) {
        const employeeRow = employeeData[i];
        const employeeId = employeeRow[1];
        if (employeeId && employeeId.toString().trim() === loginIdentifier.toString().trim()) {
            foundFullName = employeeRow[0];
            break;
        }
    }
    
    if (foundFullName) {
        // Find the account by full name
        for (let i = 1; i < accountUsers.length; i++) {
            const userRow = accountUsers[i];
            const fullNameInAccount = userRow[2];
            if (fullNameInAccount && fullNameInAccount.toString().trim() === foundFullName.toString().trim()) {
                const correctPassword = userRow[1];
                if (correctPassword && correctPassword.toString().trim() === password.toString().trim()) {
                    const userData = {
                        fullName: userRow[2] || '',
                        position: userRow[3] || '',
                        department: userRow[4] || '' 
                    };
                    console.log('Login successful by employee ID:', loginIdentifier); // Debug log
                    return createJsonResponse({ status: 'success', message: 'Login successful.', userData: userData });
                } else {
                    console.log('Wrong password for employee ID:', loginIdentifier); // Debug log
                    return createJsonResponse({ status: 'error', message: 'รหัสผ่านไม่ถูกต้อง' });
                }
            }
        }
    }
    
    console.log('User not found:', loginIdentifier); // Debug log
    return createJsonResponse({ status: 'error', message: 'ไม่พบชื่อผู้ใช้หรือรหัสพนักงาน' });
}

function handleGetShiftAssignments(sheet, date, shiftType) {
    try {
        const data = sheet.getDataRange().getValues();
        if (data.length < 2) {
            return createJsonResponse({ success: true, assignments: [] });
        }
        
        const assignments = [];
        for (let i = 1; i < data.length; i++) {
            const row = data[i];
            const rowDate = row[0] ? new Date(row[0]).toISOString().split('T')[0] : '';
            const rowShiftType = row[1];
            
            if (rowDate === date && rowShiftType === shiftType) {
                assignments.push({
                    date: rowDate,
                    shiftType: rowShiftType,
                    shiftTime: row[2],
                    employeeId: row[3],
                    employeeName: row[4]
                });
            }
        }
        
        return createJsonResponse({ success: true, assignments: assignments });
    } catch (error) {
        return createJsonResponse({ success: false, message: 'Error getting shift assignments: ' + error.toString() });
    }
}

function handleSaveShiftAssignment(sheet, shiftData) {
    try {
        const { date, shiftType, employeeIds, shiftTime } = shiftData;
        
        if (!date || !shiftType || !employeeIds || !Array.isArray(employeeIds)) {
            return createJsonResponse({ success: false, message: 'ข้อมูลไม่ครบถ้วน' });
        }
        
        // ลบข้อมูลเก่าของวันที่และกะเดียวกัน
        const data = sheet.getDataRange().getValues();
        const rowsToDelete = [];
        
        for (let i = data.length - 1; i >= 1; i--) {
            const row = data[i];
            const rowDate = row[0] ? new Date(row[0]).toISOString().split('T')[0] : '';
            const rowShiftType = row[1];
            
            if (rowDate === date && rowShiftType === shiftType) {
                rowsToDelete.push(i + 1); // +1 เพราะ getRange ใช้ 1-indexed
            }
        }
        
        // ลบแถวเก่า
        for (const rowIndex of rowsToDelete) {
            sheet.deleteRow(rowIndex);
        }
        
        // เพิ่มข้อมูลใหม่
        const employeeSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(EMPLOYEE_SHEET_NAME);
        const employeeData = employeeSheet ? employeeSheet.getDataRange().getValues() : [];
        
        for (const employeeId of employeeIds) {
            let employeeName = employeeId; // fallback
            
            // หาชื่อพนักงานจากรหัสพนักงาน
            for (let i = 1; i < employeeData.length; i++) {
                if (employeeData[i][1] === employeeId) { // สมมติว่าคอลัมน์ B เป็นรหัสพนักงาน
                    employeeName = employeeData[i][0]; // คอลัมน์ A เป็นชื่อ
                    break;
                }
            }
            
            sheet.appendRow([date, shiftType, shiftTime, employeeId, employeeName]);
        }
        
        return createJsonResponse({ success: true, message: 'บันทึกการจัดเข้ากะเรียบร้อยแล้ว' });
    } catch (error) {
        return createJsonResponse({ success: false, message: 'Error saving shift assignment: ' + error.toString() });
    }
}

function saveImageToDrive(base64Data, fileName, mimeType) {
    const folder = DriveApp.getFolderById(EMPLOYEE_PHOTO_FOLDER_ID);
    const decoded = Utilities.base64Decode(base64Data);
    const blob = Utilities.newBlob(decoded, mimeType, fileName);
    const file = folder.createFile(blob);
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    const fileId = file.getId();
    return `https://lh3.googleusercontent.com/d/${fileId}`;
}

function createJsonResponse(data) {
    return ContentService.createTextOutput(JSON.stringify(data))
        .setMimeType(ContentService.MimeType.JSON)
        .setHeader('Access-Control-Allow-Origin', '*')
        .setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        .setHeader('Access-Control-Allow-Headers', 'Content-Type');
}