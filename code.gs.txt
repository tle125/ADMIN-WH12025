// ID of the Google Sheet
const SPREADSHEET_ID = '1NX0XlZd8qI4mk0ubcySPivoHFYv0847mEdBeK2nKvqE';
// Sheet names
const ACCOUNT_SHEET_NAME = 'Account';
const EMPLOYEE_SHEET_NAME = 'ข้อมูลพนักงาน';
const OT_PLAN_SHEET_NAME = 'Plan ot';
const ATTENDANCE_SHEET_NAME = 'เช็คชื่อ';
const SHIFT_SHEET_NAME = 'ตารางกะ';
// ID of the Google Drive Folder for storing photos
const EMPLOYEE_PHOTO_FOLDER_ID = '1_0Mt3Imhz0wg2-q8PaBXKWVwTe8Kxtjr';
// *** ADDED: Define missing sheet name variable ***
const SHIFT_MANAGEMENT_SHEET_NAME = 'ตารางกะ';


function doGet(e) {
  try {
    const action = e.parameter.action;
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);

    switch(action){
      case 'getEmployees': {
        const sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
        if (!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetEmployees(sheet);
      }
      case 'getOtPlan': {
        const sheet = ss.getSheetByName(OT_PLAN_SHEET_NAME);
        if (!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetOtPlan(sheet, e.parameter.date);
      }
      case 'getAttendance': {
        const sheet = ss.getSheetByName(ATTENDANCE_SHEET_NAME);
        if(!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetAttendance(sheet, e.parameter.date);
      }
      case 'getCalendarLeaveData': {
        const sheet = ss.getSheetByName(ATTENDANCE_SHEET_NAME);
        if(!sheet) return createJsonResponse({ status: 'success', data: {} });
        return handleGetCalendarLeaveData(sheet);
      }
      case 'getShiftData': {
        const sheet = ss.getSheetByName(SHIFT_SHEET_NAME);
        if(!sheet) return createJsonResponse({ status: 'success', data: [] });
        return handleGetShiftData(sheet, e.parameter.date, e.parameter.shiftType);
      }
      case 'getShiftAssignments': {
        const sheet = ss.getSheetByName(SHIFT_MANAGEMENT_SHEET_NAME);
        if(!sheet) return createJsonResponse({ success: true, assignments: [] });
        return handleGetShiftAssignments(sheet, e.parameter.date, e.parameter.shiftType);
      }
      case 'getOtReport': {
        const sheet = ss.getSheetByName(OT_PLAN_SHEET_NAME);
        if (!sheet) return createJsonResponse({ status: 'error', message: 'Sheet "Plan ot" not found.' });
        return handleGetOtReport(sheet, e.parameter.startDate, e.parameter.endDate, e.parameter.department, e.parameter.employeeId);
      }
      case 'getShiftSummary': {
        const shiftSheet = ss.getSheetByName(SHIFT_MANAGEMENT_SHEET_NAME);
        if (!shiftSheet) return createJsonResponse({ success: false, message: 'Shift management sheet not found.' });
        return handleGetShiftSummary(shiftSheet, e.parameter.startDate, e.parameter.endDate);
      }
      default:
        return createJsonResponse({ status: 'error', message: 'Invalid GET action.' });
    }
  } catch (error) {
    return createJsonResponse({ status: 'error', message: 'An unexpected error occurred: ' + error.toString() });
  }
}


function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    const action = data.action;
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);

    switch(action) {
        case 'register':
        case 'login': {
            const accountSheet = ss.getSheetByName(ACCOUNT_SHEET_NAME);
            if (!accountSheet) return createJsonResponse({ status: 'error', message: 'Account sheet not found.' });
            if (action === 'register') return handleRegistration(accountSheet, data);
            
            const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            const { username, password } = data;
            return handleLogin(accountSheet, employeeSheet, username, password);
        }
        case 'addEmployee': {
            let sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            if (!sheet) {
                sheet = ss.insertSheet(EMPLOYEE_SHEET_NAME);
                sheet.appendRow(['ชื่อ-นามสกุล', 'รหัสพนักงาน', 'ส่วนงาน', 'ตำแหน่ง', 'หน้าที่', 'Role', 'วันที่เริ่มงาน', 'ลิงก์รูปถ่าย']);
            }
            return handleAddEmployee(sheet, data.data);
        }
        case 'updateEmployee': {
            let sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Employee sheet not found.' });
            return handleUpdateEmployee(sheet, data.data);
        }
        case 'deleteEmployee': {
            let sheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Employee sheet not found.' });
            return handleDeleteEmployee(sheet, data.employeeId);
        }
        case 'saveOtPlan': {
            let sheet = ss.getSheetByName(OT_PLAN_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Sheet "Plan ot" not found.' });
            return handleSaveOtPlan(sheet, data.data);
        }
        case 'saveAttendance': {
            let sheet = ss.getSheetByName(ATTENDANCE_SHEET_NAME);
             if (!sheet) return createJsonResponse({ status: 'error', message: 'Sheet "เช็คชื่อ" not found.' });
            return handleSaveAttendance(sheet, data.data);
        }
        // *** RENAMED ACTION to match frontend call ***
        case 'saveShiftAssignment': {
            let sheet = ss.getSheetByName(SHIFT_SHEET_NAME);
            if (!sheet) return createJsonResponse({ status: 'error', message: 'Sheet "ตารางกะ" not found.' });
            // *** UPDATED: Pass the correct data object ***
            return handleSaveShiftAssignment(sheet, data.shiftData);
        }
        default:
            return createJsonResponse({ status: 'error', message: 'Invalid POST action.' });
    }
  } catch (error) {
    return createJsonResponse({ status: 'error', message: 'An unexpected error occurred: ' + error.toString() });
  }
}
function handleGetShiftData(sheet, date, shiftType) {
    if (!date || !shiftType) {
        return createJsonResponse({ status: 'error', message: 'Date and shiftType parameters are required.' });
    }
    
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: [] });
    }

    const headers = data[0].map(h => h.trim());
    const dateCol = headers.indexOf('วันที่');
    const shiftTypeCol = headers.indexOf('ประเภทกะ');
    const empIdCol = headers.indexOf('รหัสพนักงาน');

    if (dateCol === -1 || shiftTypeCol === -1 || empIdCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns not found in ตารางกะ sheet.' });
    }
    
    const requestedDate = new Date(date);
    const records = data.slice(1)
        .filter(row => {
            if (!row[dateCol]) return false;
            const rowDate = new Date(row[dateCol]);
            const rowShiftType = row[shiftTypeCol];
            return rowDate.getFullYear() === requestedDate.getFullYear() &&
                   rowDate.getMonth() === requestedDate.getMonth() &&
                   rowDate.getDate() === requestedDate.getDate() &&
                   rowShiftType === shiftType;
        })
        .map(row => row[empIdCol]); // Return only employee IDs

    return createJsonResponse({ status: 'success', data: records });
}

function handleGetShiftSummary(shiftSheet, startDate, endDate) {
    try {
        // Get shift data
        const shiftData = shiftSheet.getDataRange().getValues();
        if (shiftData.length <= 1) {
            return createJsonResponse({ success: true, summaryData: [] });
        }

        const shiftHeaders = shiftData[0];
        const dateCol = shiftHeaders.indexOf('วันที่');
        const shiftTypeCol = shiftHeaders.indexOf('ประเภทกะ');
        const employeeIdCol = shiftHeaders.indexOf('รหัสพนักงาน');
        const departmentCol = shiftHeaders.indexOf('ส่วนงาน');
        const employeeNameCol = shiftHeaders.indexOf('ชื่อ-สกุล');

        if (dateCol === -1 || shiftTypeCol === -1 || employeeIdCol === -1 || departmentCol === -1) {
            return createJsonResponse({ success: false, message: 'Required columns (วันที่, ประเภทกะ, รหัสพนักงาน, ส่วนงาน) not found in shift data.' });
        }

        const startDateObj = new Date(startDate);
        const endDateObj = new Date(endDate);
        
        // Group data by week and department
        const summaryMap = {};
        
        shiftData.slice(1).forEach(row => {
            if (!row[dateCol] || !row[shiftTypeCol] || !row[employeeIdCol] || !row[departmentCol]) return;
            
            const rowDate = new Date(row[dateCol]);
            if (rowDate < startDateObj || rowDate > endDateObj) return;
            
            const employeeId = row[employeeIdCol];
            const department = row[departmentCol];
            const shiftType = row[shiftTypeCol];
            const employeeName = employeeNameCol !== -1 ? row[employeeNameCol] : employeeId;
            
            // Calculate week start (Monday)
            const weekStart = new Date(rowDate);
            const dayOfWeek = weekStart.getDay();
            const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
            weekStart.setDate(weekStart.getDate() - daysToMonday);
            weekStart.setHours(0, 0, 0, 0);
            
            // Calculate week end (Sunday)
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekEnd.getDate() + 6);
            weekEnd.setHours(23, 59, 59, 999);
            
            const weekKey = weekStart.toISOString().split('T')[0];
            
            const key = `${weekKey}_${department}_${shiftType}`;
            
            if (!summaryMap[key]) {
                summaryMap[key] = {
                    weekStart: weekKey,
                    weekEnd: weekEnd.toISOString().split('T')[0],
                    department: department,
                    shiftType: shiftType,
                    employees: new Map(),
                    count: 0
                };
            }
            
            summaryMap[key].employees.set(employeeId, employeeName);
        });
        
        // Convert to array and calculate final counts with employee details
        const summaryData = Object.values(summaryMap).map(item => {
            const employeeList = Array.from(item.employees.entries()).map(([id, name]) => ({
                id: id,
                name: name
            }));
            
            return {
                weekStart: item.weekStart,
                weekEnd: item.weekEnd,
                department: item.department,
                shiftType: item.shiftType,
                count: item.employees.size,
                employees: employeeList
            };
        });
        
        return createJsonResponse({ success: true, summaryData: summaryData });
        
    } catch (error) {
        return createJsonResponse({ success: false, message: 'Error processing shift summary: ' + error.toString() });
    }
}

// *** RENAMED FUNCTION and UPDATED PARAMETERS to match frontend call ***
function handleSaveShiftAssignment(sheet, data) {
    const { date, shiftType, employeeIds } = data;
    if (!date || !shiftType || !employeeIds) {
        return createJsonResponse({ status: 'error', message: 'Missing date, shiftType, or employeeIds data.' });
    }

    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
    if (!employeeSheet) return createJsonResponse({ status: 'error', message: 'Employee data sheet not found.' });
    
    const employeeData = employeeSheet.getDataRange().getValues();
    const employeeMap = employeeData.slice(1).reduce((acc, row) => {
        const employeeId = row[1];
        const fullName = row[0];
        const department = row[2];
        if (employeeId) acc[employeeId.toString()] = { fullName, department };
        return acc;
    }, {});

    const sheetData = sheet.getDataRange().getValues();
    const headers = sheetData.length > 0 ? sheetData[0].map(h => h.trim()) : [];
    const dateColIdx = headers.indexOf('วันที่');
    const shiftTypeColIdx = headers.indexOf('ประเภทกะ');
    
    if (headers.length > 0 && (dateColIdx === -1 || shiftTypeColIdx === -1)) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, ประเภทกะ) not found in ตารางกะ sheet.' });
    }

    const requestedDate = new Date(date);
    
    // Get departments of employees being assigned to determine which departments to update
    const departmentsToUpdate = new Set();
    employeeIds.forEach(id => {
        const emp = employeeMap[id.toString()];
        if (emp && emp.department) {
            departmentsToUpdate.add(emp.department);
        }
    });
    
    // Only delete existing rows for the same date, shift type, AND departments being updated
    let rowsToDelete = [];
    if (sheetData.length > 1) {
        const departmentColIdx = headers.indexOf('ส่วนงาน');
        for (let i = sheetData.length - 1; i >= 1; i--) {
            const row = sheetData[i];
            if (!row[dateColIdx]) continue;
            const rowDate = new Date(row[dateColIdx]);
            const rowShiftType = row[shiftTypeColIdx];
            const rowDepartment = departmentColIdx !== -1 ? row[departmentColIdx] : '';
            
            if (rowDate.getFullYear() === requestedDate.getFullYear() &&
                rowDate.getMonth() === requestedDate.getMonth() &&
                rowDate.getDate() === requestedDate.getDate() &&
                rowShiftType === shiftType &&
                departmentsToUpdate.has(rowDepartment)) {
                // Only delete rows for departments that are being updated
                rowsToDelete.push(i + 1);
            }
        }
    }

    // Delete rows in reverse order to avoid shifting indices
    rowsToDelete.sort((a, b) => b - a).forEach(rowIndex => sheet.deleteRow(rowIndex));


    const newRows = employeeIds.map(id => {
        const emp = employeeMap[id.toString()] || { fullName: 'Unknown', department: 'Unknown' };
        return [
            date,
            shiftType,
            id,
            emp.fullName,
            emp.department
        ];
    });

    if (newRows.length > 0) {
        sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
    }
    
    if (headers.length === 0 || headers.join('').trim() === '') {
        sheet.getRange(1, 1, 1, 5).setValues([['วันที่', 'ประเภทกะ', 'รหัสพนักงาน', 'ชื่อ-สกุล', 'ส่วนงาน']]);
    }

    return createJsonResponse({ success: true, message: 'Shift data saved successfully.' });
}



function handleGetCalendarLeaveData(sheet) {
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: {} });
    }

    const headers = data[0].map(h => h.trim());
    const dateCol = headers.indexOf('วันที่');
    const empIdCol = headers.indexOf('รหัสพนักงาน');
    const nameCol = headers.indexOf('ชื่อ-นามสกุล');
    const statusCol = headers.indexOf('สถานะ');
    const reasonCol = headers.indexOf('เหตุผล');

    if (dateCol === -1 || empIdCol === -1 || statusCol === -1 || nameCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน, ชื่อ-นามสกุล, สถานะ) not found in เช็คชื่อ sheet.' });
    }
    
    const leaveDataByDate = {};
    const leaveStatusToExclude = ['มาทำงาน', 'สาย/Meeting'];

    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const status = row[statusCol];

        if (status && !leaveStatusToExclude.includes(status)) {
            const date = new Date(row[dateCol]);
            const dateStr = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0');
            
            if (!leaveDataByDate[dateStr]) {
                leaveDataByDate[dateStr] = [];
            }
            
            leaveDataByDate[dateStr].push({
                employeeName: row[nameCol],
                employeeId: row[empIdCol],
                leaveType: status,
                reason: reasonCol > -1 ? row[reasonCol] : '',
                leaveDate: date.toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric', timeZone: 'Asia/Bangkok' })
            });
        }
    }
    
    return createJsonResponse({ status: 'success', data: leaveDataByDate });
}


function handleGetAttendance(sheet, date) {
    if (!date) return createJsonResponse({ status: 'error', message: 'Date parameter is missing.' });
    
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) return createJsonResponse({ status: 'success', data: [] });

    const headers = data[0].map(h => h.trim());
    const dateCol = headers.indexOf('วันที่');
    const empIdCol = headers.indexOf('รหัสพนักงาน');
    const statusCol = headers.indexOf('สถานะ');
    const reasonCol = headers.indexOf('เหตุผล');

    if (dateCol === -1 || empIdCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in เช็คชื่อ sheet.' });
    }
    
    const requestedDate = new Date(date);
    const records = data.slice(1)
        .filter(row => {
            if (!row[dateCol]) return false;
            const rowDate = new Date(row[dateCol]);
            return rowDate.getFullYear() === requestedDate.getFullYear() &&
                   rowDate.getMonth() === requestedDate.getMonth() &&
                   rowDate.getDate() === requestedDate.getDate();
        })
        .map(row => ({
            employeeId: row[empIdCol],
            status: statusCol > -1 ? row[statusCol] : 'มาทำงาน',
            reason: reasonCol > -1 ? row[reasonCol] : ''
        }));

    return createJsonResponse({ status: 'success', data: records });
}


function handleSaveAttendance(sheet, data) {
    const { date, records } = data;
    if (!date || !records) {
        return createJsonResponse({ status: 'error', message: 'Missing date or records data.' });
    }

    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
    if (!employeeSheet) return createJsonResponse({ status: 'error', message: 'Employee data sheet not found.' });
    
    const employeeData = employeeSheet.getDataRange().getValues();
    const employeeMap = employeeData.slice(1).reduce((acc, row) => {
        const employeeId = row[1];
        const fullName = row[0];
        if (employeeId) acc[employeeId] = { fullName };
        return acc;
    }, {});

    const sheetData = sheet.getDataRange().getValues();
    const headers = sheetData.length > 0 ? sheetData[0].map(h => h.trim()) : [];
    const dateColIdx = headers.indexOf('วันที่');
    const empIdColIdx = headers.indexOf('รหัสพนักงาน');
    
    if (headers.length > 0 && (dateColIdx === -1 || empIdColIdx === -1)) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in เช็คชื่อ sheet.' });
    }

    const requestedDate = new Date(date);
    
    const updatedEmployeeIds = records.map(r => r.employeeId.toString());

    const rowsToDelete = [];
    if (sheetData.length > 1) {
      for (let i = sheetData.length - 1; i >= 1; i--) {
          const row = sheetData[i];
          if (!row[dateColIdx]) continue;
          const rowDate = new Date(row[dateColIdx]);
          const rowEmpId = row[empIdColIdx].toString();
          if (rowDate.getFullYear() === requestedDate.getFullYear() &&
              rowDate.getMonth() === requestedDate.getMonth() &&
              rowDate.getDate() === requestedDate.getDate() &&
              updatedEmployeeIds.includes(rowEmpId)) {
              rowsToDelete.push(i + 1);
          }
      }
    }
    
    rowsToDelete.forEach(rowIndex => sheet.deleteRow(rowIndex));

    const newRows = records.map(record => {
        const emp = employeeMap[record.employeeId] || { fullName: 'Unknown' };
        return [
            date,
            record.employeeId,
            emp.fullName,
            record.status,
            record.reason,
            new Date() // Timestamp
        ];
    });

    if (newRows.length > 0) {
        sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
    }
    
    if (headers.length === 0 || headers.join('').trim() === '') {
        sheet.getRange(1, 1, 1, 6).setValues([['วันที่', 'รหัสพนักงาน', 'ชื่อ-นามสกุล', 'สถานะ', 'เหตุผล', 'เวลาบันทึก']]);
    }

    return createJsonResponse({ status: 'success', message: 'Attendance saved successfully.' });
}


function handleGetOtPlan(sheet, date) {
    if (!date) {
        return createJsonResponse({ status: 'error', message: 'Date parameter is missing.' });
    }
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: [] });
    }
    const headers = data[0].map(h => h.trim());
    const planData = [];
    
    const dateCol = headers.indexOf('วันที่');
    const empIdCol = headers.indexOf('รหัสพนักงาน');
    const startTimeCol = headers.indexOf('เวลาเริ่ม');
    const endTimeCol = headers.indexOf('เวลาสิ้นสุด');
    const notesCol = headers.indexOf('หมายเหตุ / งาน');

    if (dateCol === -1 || empIdCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in Plan ot sheet.' });
    }

    const requestedDate = new Date(date);

    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (!row[dateCol]) continue;
        const rowDate = new Date(row[dateCol]);
        if (rowDate.getFullYear() === requestedDate.getFullYear() &&
            rowDate.getMonth() === requestedDate.getMonth() &&
            rowDate.getDate() === requestedDate.getDate()) 
        {
            planData.push({
                employeeId: row[empIdCol],
                startTime: startTimeCol > -1 ? row[startTimeCol] : '',
                endTime: endTimeCol > -1 ? row[endTimeCol] : '',
                notes: notesCol > -1 ? row[notesCol] : ''
            });
        }
    }
    return createJsonResponse({ status: 'success', data: planData });
}


function handleSaveOtPlan(sheet, data) {
    const { date, plans, department } = data;
    if (!date || !plans || !department) {
        return createJsonResponse({ status: 'error', message: 'Missing date, plans, or department data.' });
    }
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const employeeSheet = ss.getSheetByName(EMPLOYEE_SHEET_NAME);
    if (!employeeSheet) {
        return createJsonResponse({ status: 'error', message: 'Employee data sheet not found.' });
    }
    const employeeData = employeeSheet.getDataRange().getValues();
    const employeeHeaders = employeeData[0].map(h => h.trim());
    const empIdColIdx_empSheet = employeeHeaders.indexOf('รหัสพนักงาน');
    const fullNameColIdx_empSheet = employeeHeaders.indexOf('ชื่อ-นามสกุล');
    const deptColIdx_empSheet = employeeHeaders.indexOf('ส่วนงาน');
    
    const employeeMap = employeeData.slice(1).reduce((acc, row) => {
        const employeeId = row[empIdColIdx_empSheet];
        if (employeeId) {
            acc[employeeId] = { 
                fullName: row[fullNameColIdx_empSheet], 
                department: row[deptColIdx_empSheet]
            };
        }
        return acc;
    }, {});
    
    const sheetData = sheet.getDataRange().getValues();
    const headers = sheetData.length > 0 ? sheetData[0].map(h => h.trim()) : [];
    const dateColIdx = headers.indexOf('วันที่');
    const empIdColIdx = headers.indexOf('รหัสพนักงาน');
    
    if (headers.length > 0 && (dateColIdx === -1 || empIdColIdx === -1)) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in Plan ot sheet.' });
    }

    const requestedDate = new Date(date);

    const updatedEmployeeIds = plans.map(p => p.employeeId.toString());

    const rowsToDelete = [];
    if (sheetData.length > 1) {
      for (let i = sheetData.length - 1; i >= 1; i--) {
          if (!sheetData[i][dateColIdx]) continue;
          const rowDate = new Date(sheetData[i][dateColIdx]);
          const rowEmpId = sheetData[i][empIdColIdx].toString();
          if (rowDate.getFullYear() === requestedDate.getFullYear() &&
              rowDate.getMonth() === requestedDate.getMonth() &&
              rowDate.getDate() === requestedDate.getDate() &&
              updatedEmployeeIds.includes(rowEmpId)) {
              rowsToDelete.push(i + 1);
          }
      }
    }
    
    rowsToDelete.forEach(rowIndex => sheet.deleteRow(rowIndex));

    const newRows = plans
        .filter(plan => (plan.startTime && plan.endTime) || plan.notes) // Only add rows that have OT or a leave note
        .map(plan => {
            const emp = employeeMap[plan.employeeId] || { fullName: 'Unknown', department: department };
            
            // Calculate OT hours automatically
            let otHours = 0;
            if (plan.startTime && plan.endTime) {
                const [startHour, startMin] = plan.startTime.split(':').map(Number);
                const [endHour, endMin] = plan.endTime.split(':').map(Number);
                let startMinutes = startHour * 60 + startMin;
                let endMinutes = endHour * 60 + endMin;
                
                // Handle overnight OT
                if (endMinutes < startMinutes) {
                    endMinutes += 24 * 60;
                }
                
                const diffMinutes = endMinutes - startMinutes;
                if (diffMinutes > 0) {
                    otHours = diffMinutes / 60;
                }
            }
            
            return [
                date,
                plan.employeeId,
                emp.fullName,
                emp.department,
                plan.startTime,
                plan.endTime,
                plan.notes,
                otHours // Add OT hours to column H
            ];
    });

    if (newRows.length > 0) {
        sheet.getRange(sheet.getLastRow() + 1, 1, newRows.length, newRows[0].length).setValues(newRows);
    }
    
    if (headers.length === 0 || headers.join('').trim() === '') {
        sheet.getRange(1, 1, 1, 8).setValues([['วันที่',	'รหัสพนักงาน',	'ชื่อ-สกุล',	'ส่วนงาน',	'เวลาเริ่ม',	'เวลาสิ้นสุด',	'หมายเหตุ / งาน',	'ชั่วโมง OT']]);
    }

    return createJsonResponse({ status: 'success', message: 'OT Plan saved successfully.' });
}

function handleGetEmployees(sheet) {
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: [] });
    }
    const headers = data[0].map(h => h.trim());
    const employees = [];
    const colIndices = {
        fullName: headers.indexOf('ชื่อ-นามสกุล'),
        employeeId: headers.indexOf('รหัสพนักงาน'),
        department: headers.indexOf('ส่วนงาน'),
        position: headers.indexOf('ตำแหน่ง'),
        duty: headers.indexOf('หน้าที่'),
        startDate: headers.indexOf('วันที่เริ่มงาน'),
        photoUrl: headers.indexOf('ลิงก์รูปถ่าย'),
        role: headers.indexOf('Role')
    };
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (row.every(cell => cell === '')) continue;
        employees.push({
            fullName: colIndices.fullName > -1 ? row[colIndices.fullName] : undefined,
            employeeId: colIndices.employeeId > -1 ? row[colIndices.employeeId] : undefined,
            department: colIndices.department > -1 ? row[colIndices.department] : undefined,
            position: colIndices.position > -1 ? row[colIndices.position] : undefined,
            duty: colIndices.duty > -1 ? row[colIndices.duty] : undefined,
            startDate: colIndices.startDate > -1 ? row[colIndices.startDate] : undefined,
            photoUrl: colIndices.photoUrl > -1 ? row[colIndices.photoUrl] : undefined,
            role: colIndices.role > -1 ? row[colIndices.role] : 'User'
        });
    }
    return createJsonResponse({ status: 'success', data: employees });
}

function handleAddEmployee(sheet, employeeData) {
    const { fullName, employeeId, department, position, duty, startDate, role, photo, photoMimeType } = employeeData;
    let photoUrl = '';
    if (!fullName || !employeeId) {
        return createJsonResponse({ status: 'error', message: 'กรุณากรอกชื่อ-นามสกุล และรหัสพนักงาน' });
    }
    try {
        if (photo && photoMimeType) {
            const fileName = `${employeeId}_${new Date().getTime()}`;
            photoUrl = saveImageToDrive(photo, fileName, photoMimeType);
        }
        const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0].map(h => h.trim());
        const newRow = Array(headers.length).fill('');
        headers.forEach((header, index) => {
           switch (header) {
                case 'ชื่อ-นามสกุล': newRow[index] = fullName; break;
                case 'รหัสพนักงาน': newRow[index] = employeeId; break;
                case 'ส่วนงาน': newRow[index] = department; break;
                case 'ตำแหน่ง': newRow[index] = position; break;
                case 'หน้าที่': newRow[index] = duty; break;
                case 'วันที่เริ่มงาน': newRow[index] = startDate; break;
                case 'ลิงก์รูปถ่าย': newRow[index] = photoUrl; break;
                case 'Role': newRow[index] = role; break;
            }
        });
        sheet.appendRow(newRow);
        return createJsonResponse({ status: 'success', message: 'Employee added successfully.' });
    } catch (error) {
        return createJsonResponse({ status: 'error', message: 'Could not save data: ' + error.toString() });
    }
}

function handleUpdateEmployee(sheet, employeeData) {
    const { originalEmployeeId, fullName, employeeId, department, position, duty, startDate, role, photo, photoMimeType } = employeeData;
    if (!originalEmployeeId) {
        return createJsonResponse({ status: 'error', message: 'Original Employee ID is missing for update.' });
    }
    const data = sheet.getDataRange().getValues();
    const headers = data[0].map(h => h.trim());
    const employeeIdColIndex = headers.indexOf('รหัสพนักงาน');
    if (employeeIdColIndex === -1) {
        return createJsonResponse({ status: 'error', message: 'Cannot find "รหัสพนักงาน" column in the sheet.' });
    }
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
        if (data[i][employeeIdColIndex] && data[i][employeeIdColIndex].toString() === originalEmployeeId.toString()) {
            rowIndex = i + 1;
            break;
        }
    }
    if (rowIndex === -1) {
        return createJsonResponse({ status: 'error', message: `Employee with ID ${originalEmployeeId} not found.` });
    }
    try {
        const photoUrlColIndex = headers.indexOf('ลิงก์รูปถ่าย');
        let photoUrl = photoUrlColIndex > -1 ? sheet.getRange(rowIndex, photoUrlColIndex + 1).getValue() : '';
        if (photo && photoMimeType) {
            const fileName = `${employeeId}_${new Date().getTime()}`;
            photoUrl = saveImageToDrive(photo, fileName, photoMimeType);
        }
        headers.forEach((header, index) => {
            const col = index + 1;
            switch (header) {
                case 'ชื่อ-นามสกุล': sheet.getRange(rowIndex, col).setValue(fullName); break;
                case 'รหัสพนักงาน': sheet.getRange(rowIndex, col).setValue(employeeId); break;
                case 'ส่วนงาน': sheet.getRange(rowIndex, col).setValue(department); break;
                case 'ตำแหน่ง': sheet.getRange(rowIndex, col).setValue(position); break;
                case 'หน้าที่': sheet.getRange(rowIndex, col).setValue(duty); break;
                case 'วันที่เริ่มงาน': sheet.getRange(rowIndex, col).setValue(startDate); break;
                case 'ลิงก์รูปถ่าย': sheet.getRange(rowIndex, col).setValue(photoUrl); break;
                case 'Role': sheet.getRange(rowIndex, col).setValue(role); break;
            }
        });
        return createJsonResponse({ status: 'success', message: 'Employee data updated successfully.' });
    } catch (error) {
        return createJsonResponse({ status: 'error', message: 'Could not update data: ' + error.toString() });
    }
}

function handleDeleteEmployee(sheet, employeeId) {
    if (!employeeId) {
        return createJsonResponse({ status: 'error', message: 'Employee ID is missing for delete.' });
    }
    const data = sheet.getDataRange().getValues();
    const headers = data[0].map(h => h.trim());
    const employeeIdColIndex = headers.indexOf('รหัสพนักงาน');
     if (employeeIdColIndex === -1) {
        return createJsonResponse({ status: 'error', message: 'Cannot find "รหัสพนักงาน" column.' });
    }
    let rowIndex = -1;
    for (let i = 1; i < data.length; i++) {
        if (data[i][employeeIdColIndex] && data[i][employeeIdColIndex].toString() === employeeId.toString()) {
            rowIndex = i + 1; // 1-based index
            break;
        }
    }
    if (rowIndex > -1) {
        sheet.deleteRow(rowIndex);
        return createJsonResponse({ status: 'success', message: 'Employee deleted successfully.' });
    } else {
        return createJsonResponse({ status: 'error', message: `Employee with ID ${employeeId} not found.` });
    }
}

function handleRegistration(sheet, data) {
    const { username, password, fullName, position, department } = data;
    if (!username || !password || !fullName) {
        return createJsonResponse({ status: 'error', message: 'Username, password, and full name are required.' });
    }
    const users = sheet.getDataRange().getValues();
    for (let i = 1; i < users.length; i++) {
        if (users[i][0] === username) {
            return createJsonResponse({ status: 'error', message: 'Username already exists.' });
        }
    }
    sheet.appendRow([username, password, fullName, position, department]);
    return createJsonResponse({ status: 'success', message: 'Registration successful.' });
}

function handleLogin(accountSheet, employeeSheet, loginIdentifier, password) {
    if (!loginIdentifier || !password) {
        return createJsonResponse({ status: 'error', message: 'กรุณากรอกชื่อผู้ใช้/รหัส และรหัสผ่าน' });
    }
    const accountUsers = accountSheet.getDataRange().getValues();
    for (let i = 1; i < accountUsers.length; i++) {
        const userRow = accountUsers[i];
        const username = userRow[0];
        if (username.toString() === loginIdentifier) {
            const correctPassword = userRow[1];
            if (correctPassword.toString() == password) {
                const userData = {
                    fullName: userRow[2] || '',
                    position: userRow[3] || '',
                    department: userRow[4] || ''
                };
                return createJsonResponse({ status: 'success', message: 'Login successful.', userData: userData });
            } else {
                return createJsonResponse({ status: 'error', message: 'รหัสผ่านไม่ถูกต้อง' });
            }
        }
    }
    if (!employeeSheet) {
        return createJsonResponse({ status: 'error', message: 'ไม่พบชื่อผู้ใช้' });
    }
    const employeeData = employeeSheet.getDataRange().getValues();
    let foundFullName = null;
    for (let i = 1; i < employeeData.length; i++) {
        const employeeRow = employeeData[i];
        const employeeId = employeeRow[1];
        if (employeeId && employeeId.toString() == loginIdentifier) {
            foundFullName = employeeRow[0];
            break;
        }
    }
    if (foundFullName) {
        for (let i = 1; i < accountUsers.length; i++) {
            const userRow = accountUsers[i];
            const fullNameInAccount = userRow[2];
            if (fullNameInAccount === foundFullName) {
                const correctPassword = userRow[1];
                if (correctPassword.toString() == password) {
                    const userData = {
                        fullName: userRow[2] || '',
                        position: userRow[3] || '',
                        department: userRow[4] || '' 
                    };
                    return createJsonResponse({ status: 'success', message: 'Login successful.', userData: userData });
                } else {
                    return createJsonResponse({ status: 'error', message: 'รหัสผ่านไม่ถูกต้อง' });
                }
            }
        }
    }
    return createJsonResponse({ status: 'error', message: 'ไม่พบชื่อผู้ใช้หรือรหัสพนักงาน' });
}

function handleGetShiftAssignments(sheet, date, shiftType) {
    try {
        const data = sheet.getDataRange().getValues();
        if (data.length < 2) {
            return createJsonResponse({ success: true, assignments: [] });
        }
        
        const assignments = [];
        for (let i = 1; i < data.length; i++) {
            const row = data[i];
            const rowDate = row[0] ? new Date(row[0]).toISOString().split('T')[0] : '';
            const rowShiftType = row[1];
            
            if (rowDate === date && rowShiftType === shiftType) {
                assignments.push({
                    date: rowDate,
                    shiftType: rowShiftType,
                    shiftTime: row[2],
                    employeeId: row[3],
                    employeeName: row[4]
                });
            }
        }
        
        return createJsonResponse({ success: true, assignments: assignments });
    } catch (error) {
        return createJsonResponse({ success: false, message: 'Error getting shift assignments: ' + error.toString() });
    }
}

function saveImageToDrive(base64Data, fileName, mimeType) {
    const folder = DriveApp.getFolderById(EMPLOYEE_PHOTO_FOLDER_ID);
    const decoded = Utilities.base64Decode(base64Data);
    const blob = Utilities.newBlob(decoded, mimeType, fileName);
    const file = folder.createFile(blob);
    file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
    const fileId = file.getId();
    return `https://drive.google.com/uc?export=view&id=${fileId}`;
}

function handleGetOtReport(sheet, startDate, endDate, department, employeeId) {
    if (!startDate || !endDate) {
        return createJsonResponse({ status: 'error', message: 'Start date and end date parameters are required.' });
    }
    
    const data = sheet.getDataRange().getValues();
    if (data.length < 2) {
        return createJsonResponse({ status: 'success', data: [] });
    }

    const headers = data[0].map(h => h.toString().trim());
    console.log('Headers found:', headers);
    
    const dateCol = headers.indexOf('วันที่');
    const empIdCol = headers.indexOf('รหัสพนักงาน');
    const nameCol = headers.indexOf('ชื่อ-สกุล');
    const deptCol = headers.indexOf('ส่วนงาน');
    
    // Try multiple variations for start time column
    let startTimeCol = headers.indexOf('เวลาเริ่ม');
    if (startTimeCol === -1) startTimeCol = headers.indexOf('เวลา เริ่ม');
    if (startTimeCol === -1) startTimeCol = headers.indexOf('เวลาเริ่มต้น');
    if (startTimeCol === -1) startTimeCol = headers.indexOf('เวลาเข้า');
    
    // Try multiple variations for end time column  
    let endTimeCol = headers.indexOf('เวลาสิ้นสุด');
    if (endTimeCol === -1) endTimeCol = headers.indexOf('เวลา สิ้นสุด');
    if (endTimeCol === -1) endTimeCol = headers.indexOf('เวลาออก');
    if (endTimeCol === -1) endTimeCol = headers.indexOf('เวลาเลิก');
    
    // Try to find OT hours column
    let otHoursCol = headers.indexOf('ชั่วโมง OT');
    if (otHoursCol === -1) otHoursCol = headers.indexOf('ชั่วโมงOT');
    if (otHoursCol === -1) otHoursCol = headers.indexOf('OT Hours');
    if (otHoursCol === -1) otHoursCol = headers.indexOf('ชั่วโมง');
    
    // Try different variations for notes column
    let notesCol = headers.indexOf('หมายเหตุ / งาน');
    if (notesCol === -1) notesCol = headers.indexOf('หมายเหตุ/งาน');
    if (notesCol === -1) notesCol = headers.indexOf('หมายเหตุ เวลา / งาน');
    if (notesCol === -1) notesCol = headers.indexOf('หมายเหตุเวลา/งาน');
    
    console.log('Column indices:', {
        dateCol, empIdCol, nameCol, deptCol, startTimeCol, endTimeCol, otHoursCol, notesCol
    });
    
    console.log('Start time column found:', startTimeCol > -1 ? headers[startTimeCol] : 'NOT FOUND');
    console.log('End time column found:', endTimeCol > -1 ? headers[endTimeCol] : 'NOT FOUND');
    console.log('OT hours column found:', otHoursCol > -1 ? headers[otHoursCol] : 'NOT FOUND');

    if (dateCol === -1 || empIdCol === -1) {
        return createJsonResponse({ status: 'error', message: 'Required columns (วันที่, รหัสพนักงาน) not found in Plan ot sheet.' });
    }

    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);
    
    const records = data.slice(1)
        .filter(row => {
            if (!row[dateCol]) return false;
            const rowDate = new Date(row[dateCol]);
            
            // Date range filter
            if (rowDate < startDateObj || rowDate > endDateObj) return false;
            
            // Department filter
            if (department && deptCol > -1 && row[deptCol] !== department) return false;
            
            // Employee ID filter
            if (employeeId && row[empIdCol] !== employeeId) return false;
            
            return true;
        })
        .map(row => ({
            date: row[dateCol],
            employeeId: row[empIdCol],
            employeeName: nameCol > -1 ? row[nameCol] : '',
            department: deptCol > -1 ? row[deptCol] : '',
            startTime: startTimeCol > -1 ? row[startTimeCol] : '',
            endTime: endTimeCol > -1 ? row[endTimeCol] : '',
            otHours: otHoursCol > -1 ? row[otHoursCol] : '',
            notes: notesCol > -1 ? row[notesCol] : ''
        }));

    return createJsonResponse({ status: 'success', data: records });
}

function createJsonResponse(data) {
    return ContentService.createTextOutput(JSON.stringify(data))
        .setMimeType(ContentService.MimeType.JSON);
}
